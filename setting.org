:PROPERTIES:
:END:

** global config
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC emacs-lisp
     ;; select current line

   #+END_SRC

   #+RESULTS:
   | global-hl-line-mode | #[0 \300 \207 [dashboard-insert-startupify-lists] 1] | x-wm-set-size-hint | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version |

   自动更新本配置, 按下f2后需要重新加载init.el

   #+BEGIN_SRC emacs-lisp
     (defun MyConfigAutoUpdate ()
       "autoupdate local git repository .emacs.d"
       (interactive)
       (compilation-start "cd ~/.emacs.d && git pull origin master"))

     (define-key global-map (kbd "<f2>") 'MyConfigAutoUpdate)
   #+END_SRC

   #+RESULTS:
   : MyConfigAutoUpdate


   因为 . 这个键太容易按错了，所以映射alt-, alt-. alt-/ 统一为按下point键位

   #+BEGIN_SRC emacs-lisp
     (defun insert-my-favorite-point ()
       (interactive)
       (insert "."))

     (global-set-key (kbd "M-,") #'insert-my-favorite-point)
     (global-set-key (kbd "M-.") #'insert-my-favorite-point)
     (global-set-key (kbd "M-/") #'insert-my-favorite-point)
   #+END_SRC
   #+RESULTS:
   : insert-my-favorite-point


** org-mode
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   | sequence | TODO(t) |          |             | DONE(d) |      |
   | sequence | TODO    | LATER(l) |             |         | DONE |
   | sequence |         |          | NOTE(n)     |         |      |
   | sequence |         |          | CANCELED(c) |         |      |

   #+BEGIN_SRC emacs-lisp
     ;; custom function


   #+END_SRC
*** org drag image

    拖动图片到org-mode中

    #+BEGIN_SRC emacs-lisp
      (use-package org-download
        :ensure)
    #+END_SRC






** smartparens

   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   : sp-unwrap-sexp

** nvm

   #+BEGIN_SRC emacs-lisp

     ;; (use-package nvm
     ;;   :ensure)


     ;; ;; if install [nvm](https://github.com/creationix/nvm)
     ;; (when (file-exists-p "~/.nvm")
     ;;   (let ((versions (nvm--installed-versions)))
     ;;     (when versions
     ;;       (nvm-use (car (car versions)))
     ;;       (when (memq window-system '(mac ns x))
     ;;         (exec-path-from-shell-copy-env "NVM_BIN")))))
   #+END_SRC

   #+RESULTS:


   #+BEGIN_SRC emacs-lisp


     ;; 在 eshell-mode 中快速切换不同的eshell
     (defun switch-next-eshell-buffer ()
       (interactive)
       (let* ((eshell-buffer-list
               (-filter
                (lambda (buf)
                  (with-current-buffer buf
                  (equal major-mode 'eshell-mode)))
                (buffer-list)))
              (current-buffer-index
               (or (-find-index (lambda (buf) (equal buf (current-buffer))) eshell-buffer-list)
                   -1)))
         (switch-to-buffer (nth (+ current-buffer-index 1) eshell-buffer-list))))
   #+END_SRC


   #+BEGIN_SRC emacs-lisp

     (define-key global-map (kbd "C-c e n") 'switch-next-eshell-buffer)




   #+END_SRC

   #+RESULTS:

** input method

   #+BEGIN_SRC emacs-lisp
     ;; (use-package pyim-basedict
     ;;   :ensure)
     ;; (use-package pyim
     ;;   :ensure
     ;;   :config
     ;;   (pyim-basedict-enable)
     ;;   (setq pyim-page-tooltip 'minibuffer))

     ;; (setq default-input-method "pyim")
   #+END_SRC

   #+RESULTS:

** yasnippet

   文字模板, see also: https://github.com/joaotavora/yasnippet

   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   : t

** docker
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** COMMENT web-mode
   #+BEGIN_SRC emacs-lisp

     (use-package nodejs-repl
       :ensure)



   #+END_SRC

   #+RESULTS:
   : ((\.html\' . web-mode) (\.json\' . web-mode) (\.less\' . css-mode) (\.vue\' . web-mode) (\.whl\' . python-mode) (\.pth\' . python-mode) (\.pyi\' . python-mode) (\.pyr\' . python-mode) (\.pxd\' . python-mode) (\.pyo\' . python-mode) (\.pyx\' . python-mode) (\.pyc\' . python-mode) (\.pym\' . python-mode) (\.py\' . python-mode) (/Users/liquanwei/.password-store/.*\.gpg\' . pass-view-mode) (\.jsx\' . web-mode) (\.js\' . web-mode) (\.ts\' . web-mode) (\.tsx\' . web-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.tsv\' . tsv-mode) (\.[Cc][Ss][Vv]\' . csv-mode) (\.dockerfile\' . dockerfile-mode) (/Dockerfile\(?:\.[^/\]*\)?\' . dockerfile-mode) (\.editorconfig\' . editorconfig-conf-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (\.json\' . json-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.ts\' . typescript-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** typescript-mode
   #+BEGIN_SRC emacs-lisp
     ;; aligns annotation to the right hand side
     (setq company-tooltip-align-annotations t)
   #+END_SRC

   #+RESULTS:
   : t

** emacs-lisp-mode
   #+BEGIN_SRC emacs-lisp


   #+END_SRC

   #+RESULTS:
   : eval-buffer

** haskell-mode
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** dash
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   : counsel-dash

** ivy
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** whitespace-cleanup
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   : magit-file-checkout

** avy
   #+BEGIN_SRC emacs-lisp

   #+END_SRC


** projectile
   projectile & neotree

   #+BEGIN_SRC emacs-lisp





   #+END_SRC

   #+RESULTS:
   : t


** hackernews
   #+BEGIN_SRC emacs-lisp
     (use-package hackernews
       :ensure
       :bind ("C-c C-h C-n" . hackernews)
       :config
       (setq hackernews-top-story-limit 50))
   #+END_SRC
** theme
   #+BEGIN_SRC emacs-lisp



   #+END_SRC
** dashboard
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

** diminish
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** pass
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   : t

** MacOs
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:

** 显示设置
   #+BEGIN_SRC emacs-lisp


   #+END_SRC

   #+RESULTS:

** helpful
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** editorconfig
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** python-mode
   #+BEGIN_SRC emacs-lisp


   #+END_SRC


** markdown
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** comint
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   : t
** dimmer

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+RESULTS:


** common lisp

   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** which-key

   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:

** scheme

** emacs-application-framework

   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** dictionary

*** youdao
   #+BEGIN_SRC emacs-lisp

   #+END_SRC

   #+RESULTS:
   : youdao-dictionary-play-voice-at-point

*** webster
#+BEGIN_SRC emacs-lisp

#+END_SRC

#+RESULTS:
: mw-thesaurus--lookup-at-point

** expand-region

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+RESULTS:
: er/expand-region


*** lsp-bridge
#+BEGIN_SRC emacs-lisp


      ;;  (setq lsp-bridge-enable-log t)

#+END_SRC

#+RESULTS:
: (((js) . typescript-language-server))


*** 我的JS配置

#+BEGIN_SRC emacs-lisp

  ;; (add-hook 'js-mode-hook 'js2-minor-mode)
  ;; (add-hook 'js2-minor-mode-hook #'js2-refactor-mode)



#+END_SRC

#+RESULTS:
: t
